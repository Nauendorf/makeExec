#!/bin/bash

# Globals
scriptName="$0"
self="$(pwd)/$scriptName"
linkPath="/usr/bin"
MEpath="/usr/bin/MakeExec"

# Check for debug
[[ "${@: -1}" =~ (^|[[:space:]])"--debug"($|[[:space:]]) ]] && debug=1
[[ $debug ]] && echo -e "\e[96mArgs[$#]: $@"

# Help and initial checks
[[ ! $1 ]] && \
echo -e "\e[93mNo argument given.
Use -h for help." && \
exit # if no arguments were given
[[ $1 == -h ]] && \
echo -e "\e[39mVersion:  1.0.0
Usage:    MakeExec -i <script file>  ||  MakeExec -s  ||  MakeExec -i <script file> -l <link path>

  -i,     Input file to make executable
  -s,     Make self executable  (optional)
  -l,     Specify symLink path (optional);
          default is /usr/bin" && \
exit # if only returning help
[[ ! "$EUID" -eq 0 ]] && \
echo -e "\e[93mWarning: Insufficient Permissions. Try sudo." && \
exit # if sudo not given
[[ $1 == -l ]] && \
echo -e "\e[93mWarning: This option can only be used with -i." && \
exit # if -l in wrong position

##  __Main__  ##
if ([[ "$1" ==  '-s' ]] && [[ ! -f $MEpath ]] && [[ $# < 2 ]] && [[ ! $debug ]]) || \
   ([[ "$1" ==  '-s' ]] && [[ ! -f $MEpath ]] && [[ $# < 3 ]] && [[ $debug ]])
then
  [[ $debug ]] && echo -e "\e[96mTargeting self."
  linkPath="/usr/bin"
  cp "$self" "$linkPath"
  chmod +x "$linkPath/$scriptName"
  echo -e "\e[39mMakeExec is now available from anywhere"
  [[ $debug ]] && echo -e "\e[96mSuccess."
  exit
elif ([[ "$1" == '-s' ]] && [[ ! $debug ]] && [[ $# > 1 ]]) || \
     ([[ "$1" == '-s' ]] && [[ $debug ]] && [[ $# > 2 ]])
then
  echo -e "\e[31mError: Too many arguments."
  [[ $debug ]] && echo -e "\e[96mNo argument expected for -s"
  exit 
elif [[ "$1" == '-s' ]] && [[ -f "/usr/bin/MakeExec" ]]
then
  echo -e "\e[93mWarning: MakeExec is already available"
  [[ $debug ]] && echo -e "\e[96mFound MakeExec in /usr/bin."
  exit
fi

if [[ "$1" == '-i' ]] && [[ $2 ]] && [[ -f "$(pwd)/$2" ]]
then
  # TO DO: add support for -l option.
  file_to_exec=$2
  fullPath="$(pwd)/$file_to_exec"

  [[ $debug ]] && echo -e "\e[96mTargeting file at $(pwd)/$2."
  [[ ! $2 ]] && echo -e "\e[31mError: Invalid input file." && exit
  [[ -f "$linkPath/$2" ]] && echo -e "\e[93mWarning: $2 is already available" && exit
  [[ "$(head $2 -c3)" != '#!/' ]] && echo -e "\e[93mWarning: No shebang on input file." && \
  read -p "Would you like to add a shebang now? [y/n]: " yn_add
  [[ "$yn_add" == "y" ]] && read -p "Enter path to interpreter: " shebangPath
  [[ $shebangPath ]] && echo -e "#!$shebangPath\n$(cat $fullPath)" > $fullPath

  chmod +x "$fullPath"
  ln --symbolic  "$fullPath" "$linkPath"
  echo -e "\e[39m$file_to_exec is now available from anywhere"
  [[ $debug ]] && echo -e "\e[96mSuccess."
  exit
elif [[ "$1" == '-i' ]] && [[ $2 ]] && [[ ! -f "$(pwd)/$2" ]]
then
  echo -e "\e[31mError: Invalid input file or missing argument"
  [[ $debug ]] && echo -e "\e[96mNo file found at $(pwd)/$2."
  exit
elif ([[ "$1" == '-i' ]] && [[ ! $debug ]] && [[ $# > 2 ]]) || \
     ([[ "$1" == '-i' ]] && [[ $debug ]] && [[ $# > 3 ]])
then
  echo -e "\e[31mError: Too many arguments."
  [[ $debug ]] && echo -e "\e[96mNo argument expected for -i"
  exit 
fi

echo -e "\e[31mError: Unexpected argument"